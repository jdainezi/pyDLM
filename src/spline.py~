import numpy, pdb
import matplotlib.pyplot as plt

def spline(xstr,ystr,xa,ya,xpc,ypc,area,dof_node,opt):

    #INFINITE PLATE SPLINE (IPS) METHOD
    # opt = 1 => wa3 solution. GG matrix calculated by the meshes displacements
    # opt = 2 => waN solution. GG matrix calculated by the meshes angular displacements
    
    pan_ya  = xa.shape[1]
    pan_xa  = xa.shape[0]
    pan_ys  = xstr.shape[1]
    pan_xs  = xstr.shape[0]
    n_pan   = pan_xa*pan_ya             # all aerodynamic panels
    n_nodes = (pan_xs)*(pan_ys) # Number of nodes, including the clamped ones.
    
    ## Variable changes: transforming matrices into vectors!
    
    xstr1 = numpy.zeros((n_nodes)) 
    ystr1 = numpy.zeros((n_nodes,1))
    for xx in range(0,pan_xs):
        for yy in range(0,pan_ys):
            xstr1[(pan_xs)*(yy) + xx] = xstr[xx,yy] # OK!
            ystr1[(pan_xs)*(yy) + xx] = ystr[xx,yy] # OK!
    
    xa1  = numpy.zeros((n_pan)) 
    ya1  = numpy.zeros((n_pan))
    xpc1 = numpy.zeros((n_pan)) 
    ypc1 = numpy.zeros((n_pan))
    for xx in range(0,pan_xa):
        for yy in range(0,pan_ya):
            xa1 [pan_xa*(yy) + xx] = xa [xx,yy] # OK!
            ya1 [pan_xa*(yy) + xx] = ya [xx,yy] # OK!
            xpc1[pan_xa*(yy) + xx] = xpc[xx,yy] # OK!
            ypc1[pan_xa*(yy) + xx] = ypc[xx,yy] # OK!
    
    # TEST
    # xa2  = xa
    # ya2  = ya
    # xa12 = xa1
    # ya12 = ya1
    # 
    # clear xa ya xa1 ya1
    # 
    # load('Discretized_variables_original','xdl','ydl','xbox','ybox','xpc','ypc','S','xe','ye','xa','ya','xa1','ya1')
    # 
    # max(max(xstr1 - ye)) # OK!
    # max(max(ystr1 - xe)) # OK!
    # max(max(xa12 - ya))  # OK!
    # max(max(ya12 - xa))  # OK!
    # max(max(xpc1 - ya1)) # OK!
    # max(max(ypc1 - xa1)) # OK!
    # 
    # xa1 = xa12 ya1 = ya12 xa = xa2 ya = ya2
    # clear xa2 ya2 xa12 ya12
    # END
    
    ## M Matrix for force calculation using displacement
    
    # The matrix MM calculates the relation between suppose forces applied at
    # determined point of the structutres knowing the displacement at the same
    # determied points
    
    MM_disp = numpy.zeros((n_nodes + 3,n_nodes + 3))
    rr      = numpy.zeros((n_nodes + 3,n_nodes + 3))
    for ii in range(0,n_nodes):
        for jj in range(0,n_nodes):
    
            MM_disp[0,jj + 3] = 1
            MM_disp[2,jj + 3] = ystr1[jj]
            MM_disp[1,jj + 3] = xstr1[jj]
            MM_disp[jj + 3,0] = 1
            MM_disp[jj + 3,2] = ystr1[jj]
            MM_disp[jj + 3,1] = xstr1[jj]
            rr[ii + 3,jj + 3] = (xstr1[jj] - xstr1[ii])**2 + (ystr1[jj] - ystr1[ii])**2
    
            if rr[ii + 3,jj + 3] == 0:
                MM_disp[ii + 3,jj + 3] = 0
            else:
                MM_disp[ii + 3,jj + 3] = rr[ii + 3,jj + 3]*numpy.log(rr[ii + 3,jj + 3])
    
    ## MM_rot matrix for 'angular force' calculation using chord rotation
    
    # The matrix MM_rot calculates the relation between suppose 'angular forces' 
    # applied at determined point of the structutres knowing the rotation at 
    # the same determined points
    
    MM_rot = numpy.zeros((n_nodes + 1,n_nodes + 1))
    rn     = numpy.zeros((n_nodes + 1,n_nodes + 1))
    xn     = numpy.zeros((n_nodes + 1,n_nodes + 1))
    for ii in range(0,n_nodes):
        for jj in range(0,n_nodes):
    
            MM_rot[0,ii + 1] = 1
            MM_rot[ii + 1,0] = 1
    
            rn[ii + 1,jj + 1] = (ystr1[ii] - ystr1[jj])**2 + (xstr1[ii] - xstr1[jj])**2
            xn[ii + 1,jj + 1] = (ystr1[ii] - ystr1[jj])
    
            if rn[ii + 1,jj + 1] == 0:
    #             MM_rot(ii + 1,jj + 1) = 0 # Pay attetion at this added noise
                MM_rot[ii + 1,jj + 1] = 1 # Equal to Wander's original program!
            else:
                MM_rot[ii + 1,jj + 1] = 2*(1 + numpy.log(rn[ii + 1,jj + 1]))*(xn[ii + 1,jj + 1])
    
    ## T1 Matrix for relate force (structural mesh) to displacement (aerodynamic mesh)
    
    # This matrix relates the force described in the structural mesh to one
    # displacement on the aerodynamic mesh of the doublet force localization
    
    T1 = numpy.zeros((n_pan,n_nodes + 3))
    r1 = numpy.zeros((n_pan,n_nodes + 3))
    
    for ii in range(0,n_pan):
    
        T1[ii,0] = 1
        T1[ii,2] = ya1[ii]
        T1[ii,1] = xa1[ii]
    
        for jj in range(0,n_nodes):
    
            r1[ii,jj + 3] = (ya1[ii] - ystr1[jj])**2 + (xa1[ii] - xstr1[jj])**2
    
            if r1[ii,jj + 3] == 0:
                T1[ii,jj + 3] = 0
            else:
                T1[ii,jj + 3] = r1[ii,jj+ 3]*numpy.log(r1[ii,jj + 3])
    
    SS = T1.T*area
    
    ## D1 Matrix for relate moment (structural mesh) to rotation (aerodynamic mesh)
    
    # This matrix relates the moment described in the structural mesh to one
    #  rotation at the aerodynamic mesh on the control point localization
    
    D1 = numpy.zeros((n_pan,n_nodes + 1))
    r1 = numpy.zeros((n_pan,n_nodes + 1))
    x1 = numpy.zeros_like(r1)
    for ii in range(n_pan):
    
        D1[ii,0] = -1 #changed to [-] to match ZAAERO
    
        for jj in range(n_nodes):
    
            r1[ii,jj + 1] = (xpc1[ii] - xstr1[jj])**2 + (ypc1[ii] - ystr1[jj])**2
            x1[ii,jj + 1] = -(xpc1[ii] - xstr1[jj]) #changed to match ZAAERO
    
            if r1[ii,jj + 1] == 0:
                D1[ii,jj + 1] = 0
            else:
                D1[ii,jj + 1] = -2*(1 + numpy.log(r1[ii,jj + 1]))*(x1[ii,jj + 1]) #changed to [-] to match ZAAERO
    D1 = numpy.hstack([numpy.zeros((n_pan,1)),D1[:,0].reshape(n_pan,1),numpy.zeros((n_pan,1)),D1[:,1:]]) # Resizing D1 in order to have the same size of D2. Resizing: adding first and third column (zeros).
    
    ## D2 Matrix for relate force (structural mesh) to displacement (aerodynamic mesh)
    
    # This matrix relates the force described in the structural mesh to one
    # displacement at the aerodynamic mesh on the control velocity point localization
    
    D2 = numpy.zeros((n_pan,n_nodes + 3))
    r2 = numpy.zeros((n_pan,n_nodes + 3))
    for ii in range(n_pan):
    
        D2[ii,0] = 1
        D2[ii,2] = ypc1[ii]
        D2[ii,1] = xpc1[ii]
    
        for jj in range(n_nodes):
    
            r2[ii,jj + 3] = (ypc1[ii] - ystr1[jj])**2 + (xpc1[ii] - xstr1[jj])**2
    
            if r2[ii,jj + 3] == 0:
                D2[ii,jj + 3] = 0
            else:
                D2[ii,jj + 3] = r2[ii,jj + 3]*numpy.log(r2[ii,jj + 3])
    
    ## Spline matrix GG
    
    if opt == 1:
        # GG matrix calculated by the meshes displacements
        try:
            GG1 = numpy.linalg.inv(MM_disp)
        except:
            raise ValueError('Check if your structural grids are aligned. If they do not define a plane, try opt=2')
       #ind = numpy.hstack([range(0,3),numpy.arange(3,GG1.shape[0],(pan_xs)) #clamped nodes?])
        ind = range(0,3)
        GG1 = numpy.delete(GG1,ind,1)
        
        # Resizing GG matrix.
       #GG = numpy.zeros((GG1.shape[0],(pan_ys)*(pan_xs-1 #clamped?)*dof_node))
        GG = numpy.zeros((GG1.shape[0],(pan_ys)*(pan_xs)*dof_node))
        for ii in range(GG1.shape[1]):
            GG[:,2+dof_node*(ii)] = GG1[:,ii]
        
        
        # TESTE: FUNCIONA PARA 1 CASO GERAL! matre_teste_100.mat
    #     GG1 = inv(MM_disp) GG1(:,1:3) = [] # PRA TODOS OS GDL, SO TIRA AS 3 PRIMEIRAS COLUNAS
    #     
    #     # Resizing GG matrix.
    #     GG = zeros(size(GG1,1),(pan_xs + 1)*(pan_ys + 1)*dof_node) ## GG PRA TODOS OS GDL
    #     for ii = 1:size(GG1,2)
    #         GG(:,1 + dof_node*(ii - 1)) = GG1(:,ii) # GG SO PROS GDLs VERTICAIS
    #     end
    #     load ('C:\Users\user\Desktop\Mestrado\2011\NOVO\Nova_Versao\Structural Data\matre_teste_100.mat','dof_free')
    #     
    #     GG = GG(:,dof_free) # SO OS GDLs LIVRES
        # END
        
    elif opt == 2:
        # GG matrix calculated by the meshes angular displacements
        GG1 = numpy.linalg.inv(MM_rot)
       #ind = numpy.hstack([0,range(1,GG1.shape[0],(pan_ys))#clamped?])
        ind = 0
        GG1 = numpy.delete(GG1,ind,1)
        GG1 = numpy.vstack([numpy.zeros((1,GG1.shape[1])),GG1[0,:].reshape(1,GG1.shape[1]),numpy.zeros((1,GG1.shape[1])),GG1[1:,:]])
        
        # Resizing GG matrix.
       #GG = numpy.zeros((GG1.shape[0],(pan_xs)*(pan_ys-1 ##clamped?)*dof_node))
        GG = numpy.zeros((GG1.shape[0],(pan_xs)*(pan_ys)*dof_node))
        for ii in range(GG1.shape[1]):
            GG[:,2 + dof_node*(ii)] = GG1[:,ii]

    return GG,SS,D1,D2 

#ystr = numpy.array([0,1,2,3,4,5]).reshape(6,1)
#xstr = numpy.array([0.5,0.5,0.5,0.5,0.5,0.5]).reshape(6,1)
#
#ya = numpy.array([0.5,1.5,2.5,3.5,4.5]).reshape(5,1)
#xa = numpy.array([0.25,0.25,0.25,0.25,0.25]).reshape(5,1)
#
#ypc = numpy.array([0.5,1.5,2.5,3.5,4.5]).reshape(5,1)
#xpc = numpy.array([0.75,0.75,0.75,0.75,0.75]).reshape(5,1)
#
#area = numpy.array([1,1,1,1,1])
#
#
#GG,SS,D1,D2 = spline(xstr,ystr,xa,ya,xpc,ypc,area,dof_node=3,opt=1)
#pdb.set_trace()
