import numpy, pdb, sys
from kernel import kernel

def rogers(GAF,k2):

    # This sub-routine carries out the approximation for the unsteady 
    # aerodynamic load by rational functions, varing the reduced frequency in a
    # few known values.
  
    y2 = numpy.zeros(4)
    for i in [1,2,3,4]:
        y2[i-1] = 1.7*numpy.max(k2)*(i/(4.0+1))**2
 
    n_k2 = len(k2)
    n_y2 = len(y2)
    
    A1 = numpy.zeros((2,3 + n_y2,n_k2))
    for kk in range(n_k2):
    
        k1 = k2[kk]
        A1[0:2,0:3,kk]=numpy.array([1,0,-k1**2,0,k1,0]).reshape(2,3)
    
        for jj in range(n_y2):
    
            A1[0:2,3 + jj,kk] = numpy.array([k1**2/(k1**2 + y2[jj]**2),k1*y2[jj]/(k1**2 + y2[jj]**2)])
    
    # Rogers approximation for the laminar flow
    C1 = numpy.zeros((A1.shape[1],A1.shape[1],n_k2))
    D1 = numpy.zeros((A1.shape[1],1         ,n_k2))
    PP_GAF = numpy.zeros((GAF.shape[0],GAF.shape[1],3 + n_y2)) 
    PP_GAF2 = numpy.zeros_like(PP_GAF)
    for ii in range(GAF.shape[0]):
        for jj in range(GAF.shape[1]):
            
            CN1 = numpy.zeros((3 + n_y2,3 + n_y2))
            DN1 = numpy.zeros((3 + n_y2,1))
    
            B1  = numpy.zeros((2,n_k2))
            for kk in range(n_k2):
    
                B1[0,kk] = GAF[ii,jj,kk].real # Real coefficients of the aerodynamic matrix
                B1[1,kk] = GAF[ii,jj,kk].imag # Imaginary coefficients of the aerodynamic matrix
    
                C1[:,:,kk] = numpy.dot(A1[:,:,kk].T,A1[:,:,kk])
                D1[:,:,kk] = numpy.dot(A1[:,:,kk].T,B1[:,kk]).reshape(D1.shape[0],D1.shape[1])
    
                CN1 = CN1 + C1[:,:,kk]
                DN1 = DN1 + D1[:,:,kk]
                
            PP_GAF[ii,jj,:] = numpy.linalg.solve(CN1,DN1).reshape(PP_GAF.shape[2])
            
    return y2,PP_GAF

